#lang sicp

(define (last-pair? p)
  (eq? (cdr p) '()))

(define (=number? x y)
  (and (number? x) (number? y) (= x y)))

(define (memq item x)
  (cond ((null? x) #f)
        ((eq? item (car x)) x)
        (else (memq item (cdr x)))))

(define (var? e) (symbol? e))
(define (same-var? v1 v2) (and (var? v1)
                               (var? v2)
                               (eq? v1 v2)))
(define (sum? e) (eq? (car e) '+))
(define (addend e) (cadr e))
(define (augend e)
  (if (last-pair? (cddr e))
      (caddr e)
      (cons '+ (cddr e))))
(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
      (else (list '+ a1 a2))))

(define (product? e) (eq? (car e) '*))
(define (multiplier e) (cadr e))
(define (multiplicand e)
  (if (last-pair? (cddr e))
      (caddr e)
      (cons '* (cddr e))))
(define (make-product m1 m2)
  (cond ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((or (=number? m1 0) (=number? m2 0)) 0)
        (else (list '* m1 m2))))

(define (exp? e) (eq? (car e) '**))
(define (base e) (cadr e))
(define (exponent e) (caddr e))
(define (make-exp b e)
  (cond ((=number? b 1) 1)
        ((=number? e 0) 1)
        ((=number? b 0) 0)
        (else (list '** b e))))


(define (deriv exp var)
  (cond ((number? exp) 0)
        ((var? exp) (if (same-var? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum (make-product (deriv (multiplier exp) var)
                                 (multiplicand exp))
                   (make-product (multiplier exp)
                                  (deriv (multiplicand exp) var))))
        ((exp? exp)
         (make-product (exponent exp)
                       (make-product (make-exp (base exp)
                                                   (dec (exponent exp)))
                                         (deriv (base exp) var))))
        (else (error "DERIV"))))

(deriv '(+ (* 1 2 x) (* 3 x x) (* 4 y y)) 'x)